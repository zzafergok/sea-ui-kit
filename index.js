#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const chalk = require('chalk')
const degit = require('degit')
const { program } = require('commander')

// Minimum Node.js sÃ¼rÃ¼m kontrolÃ¼
const nodeVersion = process.versions.node
const [major] = nodeVersion.split('.')
if (parseInt(major, 10) < 16) {
  console.error(chalk.red('Hata: Node.js v16 veya daha Ã¼st sÃ¼rÃ¼m gereklidir.'))
  process.exit(1)
}

// Ä°stenmeyen hatalarÄ± yakalamak iÃ§in
process.on('unhandledRejection', (reason) => {
  console.error('Ä°ÅŸlenmeyen rejection:', reason)
  process.exit(1)
})

// Next.js yapÄ±landÄ±rma dosyasÄ± oluÅŸtur
const createNextConfig = (targetDir) => {
  const configContent = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: false,
}

module.exports = nextConfig;
`
  fs.writeFileSync(path.join(targetDir, 'next.config.js'), configContent)
  console.log(chalk.green('âœ… next.config.js oluÅŸturuldu'))
}

// Kurulum sonrasÄ± temizleme iÅŸlevi
const cleanupInstallationFiles = (projectDir) => {
  console.log(chalk.blue('Kurulum dosyalarÄ± temizleniyor...'))

  const targetDir = path.resolve(process.cwd(), projectDir)

  // Temizlenecek dosyalar ve klasÃ¶rler
  const filesToRemove = ['index.js', '.git', 'template', 'LICENSE-cli', 'tsconfig.cjs.json', 'tsup.config.ts']

  // package.json dÃ¼zenlemeleri
  const packageJsonPath = path.join(targetDir, 'package.json')

  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))

    // KÃ¼tÃ¼phane alanlarÄ±nÄ± temizle
    delete packageJson.main
    delete packageJson.module
    delete packageJson.types
    delete packageJson.sideEffects
    delete packageJson.files
    delete packageJson.bin
    delete packageJson.repository
    delete packageJson.keywords
    delete packageJson.author

    // Next.js projesi olarak iÅŸaretle
    packageJson.private = true

    // Scripts gÃ¼ncelleme
    packageJson.scripts = {
      dev: 'next dev',
      build: 'next build',
      start: 'next start',
      lint: 'eslint "{**/*,*}.{js,ts,jsx,tsx}"',
      prettier: 'prettier --write "{src,tests}/**/*.{js,ts,jsx,tsx}"',
    }

    // PeerDependencies'leri dependencies'e taÅŸÄ±
    if (packageJson.peerDependencies) {
      if (!packageJson.dependencies) {
        packageJson.dependencies = {}
      }

      // TÃ¼m peerDependencies'leri dependencies'e kopyala
      Object.assign(packageJson.dependencies, packageJson.peerDependencies)

      // peerDependencies'i sil
      delete packageJson.peerDependencies
    }

    // CLI'a Ã¶zgÃ¼ baÄŸÄ±mlÄ±lÄ±klarÄ± kaldÄ±r
    if (packageJson.dependencies) {
      delete packageJson.dependencies.chalk
      delete packageJson.dependencies.commander
      delete packageJson.dependencies.degit
      delete packageJson.dependencies.prompts
    }

    // Proje adÄ±nÄ± gÃ¼zelleÅŸtir
    packageJson.name = projectDir.toLowerCase().replace(/\s+/g, '-')
    packageJson.version = '0.1.0'
    packageJson.description = 'Next.js project with Sea UI Kit'

    // GÃ¼ncellenmiÅŸ package.json'Ä± kaydet
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))
    console.log(chalk.green('âœ… package.json gÃ¼ncellendi'))
  } catch (error) {
    console.warn(chalk.yellow('package.json dÃ¼zenlenemedi. Manuel olarak dÃ¼zenlemeniz gerekebilir.'))
    console.error(error)
  }

  // Providers.tsx dÃ¼zenle
  try {
    const providersPath = path.join(targetDir, 'src/providers/Providers.tsx')
    if (fs.existsSync(providersPath)) {
      let providersContent = fs.readFileSync(providersPath, 'utf8')
      providersContent = providersContent.replace(
        /useEffect\(\s*\(\)\s*=>\s*{[\s\S]*?}\s*,\s*\[\]\s*\)/,
        '// Sayfa yenileme mantÄ±ÄŸÄ± kaldÄ±rÄ±ldÄ±',
      )
      fs.writeFileSync(providersPath, providersContent)
      console.log(chalk.green('âœ… Providers.tsx dÃ¼zenlendi'))
    }
  } catch (error) {
    console.warn(chalk.yellow('Providers.tsx dÃ¼zenlenemedi. Manuel olarak dÃ¼zenlemeniz gerekebilir.'), error)
  }

  // DosyalarÄ± temizle
  filesToRemove.forEach((file) => {
    const filePath = path.join(targetDir, file)

    if (fs.existsSync(filePath)) {
      try {
        const stats = fs.statSync(filePath)

        if (stats.isDirectory()) {
          fs.rmSync(filePath, { recursive: true, force: true })
        } else {
          fs.unlinkSync(filePath)
        }
      } catch (error) {
        console.warn(chalk.yellow(`'${file}' silinemedi. Manuel olarak silmeniz gerekebilir.`), error)
      }
    }
  })

  // Yeni yapÄ±landÄ±rma dosyalarÄ±nÄ± oluÅŸtur
  createNextConfig(targetDir)

  console.log(chalk.green('âœ… Kurulum dosyalarÄ± baÅŸarÄ±yla temizlendi!'))
}

program
  .name('create-sea-ui-kit')
  .description('Create a Next.js project with Sea UI Kit')
  .argument('[project-directory]', 'The directory to create the project in')
  .action(async (projectDir) => {
    console.log(chalk.bold.blue('ðŸŒŠ Sea UI Kit projesi oluÅŸturuluyor...'))

    if (!projectDir) {
      projectDir = 'my-sea-ui-app'
      console.log(chalk.blue(`Proje dizini belirtilmedi. VarsayÄ±lan olarak "${projectDir}" kullanÄ±lÄ±yor.`))
    }

    const targetDir = path.resolve(process.cwd(), projectDir)

    if (fs.existsSync(targetDir) && fs.readdirSync(targetDir).length > 0) {
      console.log(chalk.yellow(`UyarÄ±: "${projectDir}" dizini zaten var ve boÅŸ deÄŸil. Dosyalar Ã¼zerine yazÄ±labilir.`))
    }

    console.log(chalk.blue('Template indiriliyor...'))

    const emitter = degit('zzafergok/sea-ui-kit', {
      force: true,
      verbose: true,
    })

    try {
      await emitter.clone(targetDir)
      cleanupInstallationFiles(projectDir)

      console.log(chalk.green.bold('âœ… BaÅŸarÄ±lÄ±!'))
      console.log(chalk.green("Sea UI Kit template'i indirildi:"), chalk.cyan(targetDir))
      console.log('')
      console.log('BaÅŸlamak iÃ§in:')
      console.log(chalk.cyan(`  cd ${projectDir}`))
      console.log(chalk.cyan('  npm install'))
      console.log(chalk.cyan('  npm run dev'))
      console.log('')
      console.log(chalk.blue('Keyifli kodlamalar! ðŸŽ‰'))
    } catch (error) {
      console.error(chalk.red('Template indirme hatasÄ±:'))
      console.error(error)
      process.exit(1)
    }
  })

program.parse(process.argv)
